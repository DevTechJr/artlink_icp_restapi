
import Debug "mo:base/Debug";
import Blob "mo:base/Blob";
import Cycles "mo:base/ExperimentalCycles";
import Error "mo:base/Error";
import Array "mo:base/Array";
import Nat8 "mo:base/Nat8";
import Nat64 "mo:base/Nat64";
import Text "mo:base/Text";
import HashMap = "mo:base/HashMap";
import Option "mo:base/Option";

// //import the custom types you have in Types.mo
// import Types "Types";


// //Actor
// actor {

//  public type HttpRequest = {
//         body: Blob;
//         headers: [HeaderField];
//         method: Text;
//         url: Text;
//     };

//     public type ChunkId = Nat;
//     public type SetAssetContentArguments = {
//         chunk_ids: [ChunkId];
//         content_encoding: Text;
//         key: Key;
//         sha256: ?Blob;
//     };
//     public type Path = Text;
//     public type Key = Text;

//     public type HttpResponse = {
//         body: Blob;
//         headers: [HeaderField];
//         status_code: Nat16;
//     };

//     public type HeaderField = (Text, Text);

//     private func removeQuery(str: Text): Text {
//         return Option.unwrap(Text.split(str, #char '?').next());
//     };

//     public query func http_request(req: HttpRequest): async (HttpResponse) {
//         let path = removeQuery(req.url);
//         if(path == "/hello") {
//             return {
//                 body = Text.encodeUtf8("this is starboy, to earth. :" # path);
//                 headers = [];
//                 status_code = 200;
//             };
//         };

//         return {
//             body = Text.encodeUtf8("404 Not found :" # path);
//             headers = [];
//             status_code = 404;
//         };
//     };

// //This method sends a GET request to a URL with a free API you can test.
// //This method returns Coinbase data on the exchange rate between USD and ICP
// //for a certain day.
// //The API response looks like this:
// //  [
// //     [
// //         1682978460, <-- start timestamp
// //         5.714, <-- lowest price during time range
// //         5.718, <-- highest price during range
// //         5.714, <-- price at open
// //         5.714, <-- price at close
// //         243.5678 <-- volume of ICP traded
// //     ],
// // ]

// //   public func get_icp_usd_exchange() : async Text {

// //     //1. DECLARE MANAGEMENT CANISTER
// //     //You need this so you can use it to make the HTTP request
// //     let ic : Types.IC = actor ("aaaaa-aa");

// //     //2. SETUP ARGUMENTS FOR HTTP GET request

// //     // 2.1 Setup the URL and its query parameters
// //     let ONE_MINUTE : Nat64 = 60;
// //     let start_timestamp : Types.Timestamp = 1682978460; //May 1, 2023 22:01:00 GMT
// //     let end_timestamp : Types.Timestamp = 1682978520;//May 1, 2023 22:02:00 GMT
// //     let host : Text = "api.pro.coinbase.com";
// //     let url = "https://" # host # "/products/ICP-USD/candles?start=" # Nat64.toText(start_timestamp) # "&end=" # Nat64.toText(start_timestamp) # "&granularity=" # Nat64.toText(ONE_MINUTE);

// //     // 2.2 prepare headers for the system http_request call
// //     let request_headers = [
// //         { name = "Host"; value = host # ":443" },
// //         { name = "User-Agent"; value = "exchange_rate_canister" },
// //     ];

// //     // 2.2.1 Transform context
// //     let transform_context : Types.TransformContext = {
// //       function = transform;
// //       context = Blob.fromArray([]);
// //     };

// //     // 2.3 The HTTP request
// //     let http_request : Types.HttpRequestArgs = {
// //         url = url;
// //         max_response_bytes = null; //optional for request
// //         headers = request_headers;
// //         body = null; //optional for request
// //         method = #get;
// //         transform = ?transform_context;
// //     };

// //     //3. ADD CYCLES TO PAY FOR HTTP REQUEST

// //     //The IC specification spec says, "Cycles to pay for the call must be explicitly transferred with the call"
// //     //The management canister will make the HTTP request so it needs cycles
// //     //See: /docs/current/motoko/main/canister-maintenance/cycles

// //     //The way Cycles.add() works is that it adds those cycles to the next asynchronous call
// //     //"Function add(amount) indicates the additional amount of cycles to be transferred in the next remote call"
// //     //See: /docs/current/references/ic-interface-spec#ic-http_request
// //     Cycles.add(20_949_972_000);

// //     //4. MAKE HTTP REQUEST AND WAIT FOR RESPONSE
// //     //Since the cycles were added above, you can just call the management canister with HTTPS outcalls below
// //     let http_response : Types.HttpResponsePayload = await ic.http_request(http_request);

// //     //5. DECODE THE RESPONSE

// //     //As per the type declarations in `src/Types.mo`, the BODY in the HTTP response
// //     //comes back as [Nat8s] (e.g. [2, 5, 12, 11, 23]). Type signature:

// //     //public type HttpResponsePayload = {
// //     //     status : Nat;
// //     //     headers : [HttpHeader];
// //     //     body : [Nat8];
// //     // };

// //     //You need to decode that [Nat8] array that is the body into readable text.
// //     //To do this, you:
// //     //  1. Convert the [Nat8] into a Blob
// //     //  2. Use Blob.decodeUtf8() method to convert the Blob to a ?Text optional
// //     //  3. You use a switch to explicitly call out both cases of decoding the Blob into ?Text
// //     let response_body: Blob = Blob.fromArray(http_response.body);
// //     let decoded_text: Text = switch (Text.decodeUtf8(response_body)) {
// //         case (null) { "No value returned" };
// //         case (?y) { y };
// //     };

// //     //6. RETURN RESPONSE OF THE BODY
// //     //The API response will looks like this:

// //     // ("[[1682978460,5.714,5.718,5.714,5.714,243.5678]]")

// //     //Which can be formatted as this
// //     //  [
// //     //     [
// //     //         1682978460, <-- start/timestamp
// //     //         5.714, <-- low
// //     //         5.718, <-- high
// //     //         5.714, <-- open
// //     //         5.714, <-- close
// //     //         243.5678 <-- volume
// //     //     ],
// //     // ]
// //     decoded_text
// //   };

// public func getTodoItem() : async Text {

//     // 1. Declare the management canister
//     let ic : Types.IC = actor ("aaaaa-aa");

//     // 2. Set up the URL and query parameters
//     let host : Text = "jsonplaceholder.typicode.com";
//     let url = "https://" # host # "/todos/1";

//     // 3. Prepare headers for the system HTTP request call
//     let request_headers = [
//         { name = "Host"; value = host # ":443" },
//         { name = "User-Agent"; value = "motoko_canister" },
//     ];

//     // 3.1 Transform context
//     let transform_context : Types.TransformContext = {
//       function = transform;
//       context = Blob.fromArray([]);
//     };

//     // 4. Construct the HTTP request
//     let http_request : Types.HttpRequestArgs = {
//         url = url;
//         max_response_bytes = null; // Optional for request
//         headers = request_headers;
//         body = null; // Optional for GET requests
//         method = #get;
//         transform = ?transform_context;
//     };

//     // 5. Add cycles for the HTTP request
//     Cycles.add(20_000_000_000);

//     // 6. Make HTTP request and wait for response
//     let http_response : Types.HttpResponsePayload = await ic.http_request(http_request);

//     // 7. Decode the response body (array of Nat8)
//     let response_body: Blob = Blob.fromArray(http_response.body);
//     let decoded_text: Text = switch (Text.decodeUtf8(response_body)) {
//         case (null) { "No value returned" };
//         case (?y) { y };
//     };

//     // 8. Return the response body
//     decoded_text
// };


//   //7. CREATE TRANSFORM FUNCTION
//   public query func transform(raw : Types.TransformArgs) : async Types.CanisterHttpResponsePayload {
//       let transformed : Types.CanisterHttpResponsePayload = {
//           status = raw.response.status;
//           body = raw.response.body;
//           headers = [
//               {
//                   name = "Content-Security-Policy";
//                   value = "default-src 'self'";
//               },
//               { name = "Referrer-Policy"; value = "strict-origin" },
//               { name = "Permissions-Policy"; value = "geolocation=(self)" },
//               {
//                   name = "Strict-Transport-Security";
//                   value = "max-age=63072000";
//               },
//               { name = "X-Frame-Options"; value = "DENY" },
//               { name = "X-Content-Type-Options"; value = "nosniff" },
//           ];
//       };
//       transformed;
//   };
// };

